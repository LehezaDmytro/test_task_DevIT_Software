// 5. Написать обратный метод (см. задачу 4) objectToArray, который из объекта создаст массив.

// Створюємо функцію `objectToArray`, яка приймає об'єкт як вхідний параметр.
function objectToArray(obj) {
  // Перевіряємо, чи є вхідні дані є обєктом
  if (typeof obj !== "object") {
    throw new TypeError("Параметр obj має бути обєктом.");
  }
  // Створюємо порожній масив `arr`, в який будемо зберігати результат.
  const arr = [];
  //Ствоюємо масив ключів обєкта за допомогою метода Object.keys().
  const keys = Object.keys(obj);
  // Перебираємо кожен ключ об'єкта за допомогою циклу `for...of`.
  for (const key of keys) {
    // Отримуємо значення, пов'язане з поточним ключем.
    const value = obj[key];
    // Перевіряємо, чи значення є об'єктом, але не масивом.
    if (typeof value === "object" && !Array.isArray(value)) {
      // Якщо значення є об'єктом, рекурсивно викликаємо функцію `objectToArray` для обробки вкладеного об'єкту
      // і додаємо результат до масиву, включаючи ключ як перший елемент вкладеного масиву.
      arr.push([key, objectToArray(value)]);
    } else {
      // Якщо значення не є об'єктом, додаємо його до масиву у форматі [ключ, значення].
      arr.push([key, value]);
    }
  }

  // Повертаємо ітоговий масив, який містить дані з об'єкта у вигляді масиву пар ключ-значення.
  return arr;
}

// Приклад обєкта для перевірки роботи функції.
const obj = {
  name: "Dmitro",
  age: 18,
  skills: {
    react: 4,
    node: 4,
    js: 5,
    html: 4,
    css: 5,
  },
};

// Викликаємо функцію `objectToArray` з вхідним об'єктом і зберігаємо результат у змінну `result`.
const result = objectToArray(obj);

// Виводимо результат в консоль для перевірки.
console.log(result);
